<h1>{{title}}</h1>
<p class="date">{{date}}</p>
<p>Until recently, I've had a frustrating time trying to succinctly describe what I find so objectionable about AMP. As a philosophy, AMP is fine: Make your sites faster, and we (Google) will give higher visibility to your content in search results. I can think of no better incentive for anyone with a web presence to adopt performance best practices.</p>
<p>As a technology, though, I have serious issues with it. I am <em>not</em> on board with a solution that prescribes a proprietary syntax for elements in lieu of what the rest of the web uses. The mere adoption of AMP effectively mandates that you create a separate fork of your site to provide a high performance experience for a subset of your audience, and continue <em>its</em> development in perpetuity. Which begs a question that Ethan Marcotte, Jeremy Keith, and others have since asked:</p>
<p><em>"Why not just embrace performance best practices to begin with?"<em></p>
<p>It seems like an afterthought to slap AMP as a bandage on top of tortured and wounded web experiences suffering from poor performance. Worse yet, it stops developers in their tracks any time they use existing web standards, only to find out that they don't pass AMP validation. For example: Why <code>&lt;amp-img&gt;</code> instead of <code>&lt;img&gt;</code>? Why do I need a separate, AMP-specific stylesheet? Why the hell are we doing things <em>this</em> way, instead of using the platform I thought we all agreed to develop and advance <em>together?</em></p>
<p>The job of a developer is difficult enough as it is. It's all we can do to withstand the constant firehose stream of new libraries and tooling we're told we must learn if we want to stay employable, let alone relevant. But the (perhaps intentional) side effect of all this is it leads to practical and powerful features being brought into the platform. This is how the web should evolve, and it's evolving like this every day. Now you're compelling me to adopt a performance framework with custom elements and proprietary features instead of leveraging performance best practices available in the platform? Excuse me, but fuck <em>all of that</em>. I implemented AMP for a time on this site, and have since torn it out. It's not worth the trouble for me, and dare I say, for most people.</p>
<p>You want a solution to the slow, bloated, and over-monetized web? Here's my suggestion, simplistic and imperfect as it is:</p>
<ol type="1">
	<li>Develop a list of performance criteria, and further refine page ranking algorithms to sufficiently reward sites exhibiting a high level of performance. <a href="https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html" rel="noopener">We've been told for quite some time now that performance</a> is a factor in page rankings. Let's make that factor more consequential.</li>
	<li>Punish sites that use poor performance patterns, <em>especially</em> sites with excessive advertising. The web is about providing experiences. If your landing pages have ten ad slots on them, you're providing a hostile user experience. You should suffer consequences for that.</li>
</ol>
<p>We have plenty of research indicating that fast sites are more engaging to consumers. Let's use search rankings as the stick to compel sites to generate their revenue by creating faster experiences that their users will actually <em>want</em> to engage with while embracing the open web. Instead of insulting your audience by putting five ad slots on a page, work with your sponsors to create relevant, sponsored content that your audience will appreciate.</p>
<p>I know AMP is developed by many intelligent people from Google and beyond. I understand that this post is inflammatory and undercuts the work people have put into the AMP project. That said, if you're an AMP contributor reading this, and you think AMP is the way forward, I simply disagree. Google has all the ability in the world to reward and punish sites based on their performance without fracturing the web in the process.  I want a web presided over by designers and developers who intimately understand the role of client-side architecture in performance. Not by people possessed of a mindset that a framework should be the first resort.</p>
